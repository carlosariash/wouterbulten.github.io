{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","slacjs-app.js","src/app/config.js","src/app/models/landmark-init-set.js","src/app/models/landmark-particle-set.js","src/app/models/particle-set.js","src/app/models/particle.js","src/app/models/sensor.js","src/app/models/user.js","src/app/models/vote-accumulator.js","src/app/simulation/landmark.js","src/app/simulation/user.js","src/app/util/coordinate-system.js","src/app/util/linked-list.js","src/app/util/math.js","src/app/util/sampling.js","src/app/view/visualizer.js","src/app/app-local.js","src/tests/landmark-init.js","src/tests/voting.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","environment","particles","N","defaultPose","x","y","theta","beacons","txPower","noise","range",2,"_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_landmarkParticleSet","_landmarkParticleSet2","LandmarkInitializationSet","nParticles","undefined","arguments","stdRange","randomParticles","effectiveParticleThreshold","this","particleSetMap","Map","uid","has","set","get","addMeasurement","positionEstimate","values","./landmark-particle-set",3,"_utilMath","_utilSampling","_utilCoordinateSystem","LandmarkParticleSet","measurements","_randomParticles","_updateWeights","weights","map","p","weight","numberOfEffectiveParticles","_resample","concat","estimate","varX","varY","_particleVariance","_averagePosition","averagePosition","best","forEach","normalizeWeights","reduce","prev","variance","nSamples","_this","lowVarianceSampling","deltaTheta","Math","PI","randn","_polarToCartesian","polarToCartesian","dx","dy","push","_this2","dist","sqrt","pow","pdfn","../util/coordinate-system","../util/math","../util/sampling",4,"_particle","_particle2","_landmarkInitSet","_landmarkInitSet2","ParticleSet","_ref","particleList","initialisedLandmarks","landmarkInitSet","control","samplePose","obs","indexOf","_userEstimate","userEstimate","uX","uY","_landmarkInitSet$estimate","addLandmark","processObservation","console","log","landmarks","landmark","user","./landmark-init-set","./particle",5,"_slicedToArray","arr","Array","isArray","Symbol","iterator","_arr","_n","_d","_e","_s","_i","next","done","err","_toConsumableArray","arr2","from","_user","_user2","Particle","parent","copyUser","_copyMap","abs","move","_ref2","_ref3","_ref4","cov","_ref5","errorCov","max","v","H","HxCov","covV","K","newX","newY","updateCov","newCov","copy","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","entries","_step$value","_copyLandmark","./user",6,"Sensor","iteration","landmarkConfig","rssi","_updateLandmark","_registerLandmark","observedLandmarks","_rssiToDistance","alpha","_computeAlpha","previousIteration","timeDiff","timeFactor",7,"_utilLinkedList","_utilLinkedList2","User","trace","add","../util/linked-list",8,"VoteAccumulator","dimension","precision","startX","startY","centerX","centerY","size","round","votes","fill","_inRange","error","_cartesianToCell","row","column","_midpointCircle","firstValue","firstCell","secondValue","secondCell","_cellToCartesian","output","rowOutput","cell","radiusError","_vote","floor",9,"rssiToDistance","SimulatedLandmarkSet","updateRate","xRange","yRange","broadcastId","_randomLandmark","sensor","window","setTimeout","_broadCast","clearTimeout","landmarksInRange","rssiAt","random","filter","isInRange","Landmark","measurement","randomMeasurementAtPoint","addObservation","landmarkRange","distanceTo","rssiAtRaw",10,"_inherits","subClass","superClass","create","constructor","__proto__","_get","_x","_x2","_x3","_again","object","property","receiver","desc","getter","getOwnPropertyDescriptor","getPrototypeOf","_modelsUser","_modelsUser2","SimulatedUser","_User","position","padding","lastControl","distances","angles","_newStep","lastX","lastY","addTheta","_constrainCoordinate","cartesianToPolar","min","step","debug","../models/user",11,"t1","t2","twoPi","cos","sin","atan","degreeToRadian","degrees","rotationToLocalNorth","left","right",12,"LinkedList","base","list","element","slice",13,"mean","sd","q","exp","eigenvv","b","c","d","A","B","L1","L2","y1","y2","mag1","mag2","vectors","data","valueFunc","sum","sumSq",14,"totalWeight","total","w","weightedCumulativeSum","normalisedWeights","M","normalizedWeights","rand","m","U","rouletteWheelSampling","stackedWeights",15,"Visualizer","xMax","yMax","canvas","document","getElementById","ctx","getContext","_scaleCanvas","particleSet","bestParticle","plotUserTrace","clearRect","width","height","color","lineJoin","lineWidth","fillStyle","strokeStyle","beginPath","moveTo","_tx","_ty","lineTo","stroke","closePath","arc","objects","_this3","fillRect","_this4","_plotLandmark","plotLandmarksErrors","landmarkMap","_this5","landmarkSet","_this6","particleSets","particle","_this7","_eigenvv","major","minor","beginX","beginY","isNaN","m0","m1","mm0","mm1","trueL","landmarkByUid","scaleFactor","devicePixelRatio","innerWidth","innerHeight","style","scaleFactorX","scaleFactorY","scale",16,"_modelsParticleSet","_modelsParticleSet2","_viewVisualizer","_viewVisualizer2","_simulationUser","_simulationUser2","_simulationLandmark","_modelsSensor","_modelsSensor2","_config","_config2","SlacENV","SlacApp","visualizer","initialize","startBroadcast","randomWalk","_user$getLastControl","getLastControl","observations","getObservations","resample","clearCanvas","plotObjects","plotParticleSet","plotLandmarkPredictions","plotLandmarkInitParticles","plotLandmarkEstimate","landmarkEstimate","_addSimulatedData","thetas","setPath","./config","./models/particle-set","./models/sensor","./simulation/landmark","./simulation/user","./view/visualizer",17,"walkPattern","steps","stepSize","quarter","regeneratorRuntime","wrap","context$1$0","stop","marked0$0","mark","_appModelsLandmarkInitSet","_appModelsLandmarkInitSet2","test","landmarkInit","userX","userY","lX","lY","userTrace","pattern","iterate","_pattern$next$value","_draw","../app/models/landmark-init-set",18,"_appModelsVoteAccumulator","_appModelsVoteAccumulator2","voting","lR","lC","_votes$_cartesianToCell","innerHTML","_createOutputTable","_displayLandmark","_displayUser","table","rowN","columnN","id","backgroundColor","pos","_votes$_cartesianToCell2","../app/models/vote-accumulator"],"mappings":"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,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,qBAAuB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,qBAAuB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,kBAAoB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,kBAAoB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,iBAAmB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,kBAAoB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,kBAAoB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,qBAAuB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,qBAAuB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,kBAAoB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,kBAAoB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,qBAAuB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,iBAAmB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,qBAAuB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,kBAAoB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,kBAAoB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,qBAAuB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,qBAAuB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAoB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,mBAAqB,EA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","file":"slacjs-app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",null,"/**\n * General config for SLACjs\n * @type {Object}\n */\nmodule.exports = {\n\t\n\t'environment': 'development',\n\n\tparticles: {\n\t\tN: 40,\n\n\t\tdefaultPose: {\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t\ttheta: 0\n\t\t}\n\t},\n\n\tbeacons: {\n\t\tn: 2,\n\t\ttxPower: -12,\n\t\tnoise: 2,\n\t\trange: 20\n\t}\n};","import LandmarkParticleSet from './landmark-particle-set';\n\nclass LandmarkInitializationSet {\n\t/**\n\t * Set containing multiple particle sets for initalisation of landmarks\n\t * @param  {Number} nParticles                 Number of particles in each set\n\t * @param  {Number} stdRange                   sd of range measurements\n\t * @param  {Number} randomParticles            Number of random particles\n\t * @param  {Number} effectiveParticleThreshold Threshold of effective particles\n\t * @return {LandmarkInitializationSet}\n\t */\n\tconstructor(nParticles = 500, stdRange = 4, randomParticles = 0, effectiveParticleThreshold = undefined) {\n\t\tthis.nParticles = nParticles;\n\t\tthis.stdRange = stdRange;\n\t\tthis.randomParticles = randomParticles;\n\n\t\tif (effectiveParticleThreshold === undefined) {\n\t\t\tthis.effectiveParticleThreshold = nParticles / 1.5;\n\t\t}\n\t\telse {\n\t\t\tthis.effectiveParticleThreshold = effectiveParticleThreshold;\n\t\t}\n\n\t\tthis.particleSetMap = new Map();\n\t}\n\n\t/**\n\t * Integrate a new measurement\n\t * @param {String} uid UID of landmark\n\t * @param {Number} x   Position of user\n\t * @param {Number} y   Position of user\n\t * @param {Number} r   Range measurement\n\t */\n\taddMeasurement(uid, x, y, r) {\n\t\tif (!this.has(uid)) {\n\t\t\tthis.particleSetMap.set(uid, new LandmarkParticleSet(\n\t\t\t\tthis.nParticles, this.stdRange, this.randomParticles, this.effectiveParticleThreshold\n\t\t\t));\n\t\t}\n\n\t\tthis.particleSetMap.get(uid).addMeasurement(x, y, r);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns true when there is a particle set for a landmark\n\t * @param  {String}  uid\n\t * @return {Boolean}\n\t */\n\thas(uid) {\n\t\treturn this.particleSetMap.has(uid);\n\t}\n\n\t/**\n\t * Returns best position estimate for a landmark\n\t * @param  {String} uid\n\t * @return {Object}\n\t */\n\testimate(uid) {\n\t\treturn this.particleSetMap.get(uid).positionEstimate();\n\t}\n\n\t/**\n\t * Remove a particle set\n\t * @param  {String} uid\n\t * @return {void}\n\t */\n\tremove(uid) {\n\t\tthis.particleSetMap.delete(uid);\n\t}\n\n\t/**\n\t * Return all particle sets\n\t * @return {Array}\n\t */\n\tparticleSets() {\n\t\treturn this.particleSetMap.values();\n\t}\n}\n\nexport default LandmarkInitializationSet;","import { randn, pdfn, variance } from '../util/math';\nimport { lowVarianceSampling, numberOfEffectiveParticles, normalizeWeights } from '../util/sampling';\nimport { polarToCartesian } from '../util/coordinate-system';\n\nclass LandmarkParticleSet {\n\t/**\n\t * Create a new particle set for finding the initial position of a landmark\n\t * @param  {Number} nParticles                 Number of particles\n\t * @param  {Number} stdRange                   SD of range measurements\n\t * @param  {Number} randomParticles            Number of random particles to use each update\n\t * @param  {Number} effectiveParticleThreshold Threshold for resampling\n\t * @return {LandmarkParticleSet}\n\t */\n\tconstructor(nParticles, stdRange, randomParticles, effectiveParticleThreshold) {\n\t\tthis.nParticles = nParticles;\n\t\tthis.stdRange = stdRange;\n\t\tthis.effectiveParticleThreshold = effectiveParticleThreshold;\n\t\tthis.randomParticles = randomParticles;\n\n\t\tthis.measurements = 0;\n\t\tthis.particles = [];\n\t}\n\n\t/**\n\t * Integrate a new measurement in the particle set\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} r\n\t */\n\taddMeasurement(x, y, r) {\n\n\t\tif (this.measurements === 0) {\n\n\t\t\t//Init the particle set by adding random particles around the user\n\t\t\tthis.particles = this._randomParticles(this.nParticles, x, y, r);\n\t\t}\n\t\telse {\n\t\t\tthis._updateWeights(x, y, r);\n\n\t\t\t//Determine whether resampling is effective now\n\t\t\t//Is based on the normalised weights\n\t\t\tconst weights = this.particles.map(p => p.weight);\n\t\t\tif (numberOfEffectiveParticles(weights) < this.effectiveParticleThreshold) {\n\n\t\t\t\t//Use low variance resampling to generate a set of new particles\n\t\t\t\t//Returns a list of N-randomParticles particles\n\t\t\t\tlet set = this._resample(this.nParticles - this.randomParticles);\n\n\t\t\t\t//Add new uniformly distributed particles tot the set\n\t\t\t\t//Random particles are distributed around the current position\n\t\t\t\tthis.particles = set.concat(this._randomParticles(this.randomParticles, x, y, r));\n\t\t\t}\n\t\t}\n\n\t\tthis.measurements++;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Return the current estimate of this landmark's position\n\t * @return {Object}\n\t */\n\tpositionEstimate() {\n\n\t\t//Fast check, never return before we have at least multiple measurements\n\t\tif (this.measurements < 10) {\n\t\t\treturn {estimate: 0, x: 0, y: 0, varX: 1, varY: 1};\n\t\t}\n\n\t\tconst {varX, varY} = this._particleVariance();\n\n\t\t//@todo Make this constraint configurable\n\t\tif (varX < 8 && varY < 8) {\n\n\t\t\t//Compute a weighted average of the particles\n\t\t\tconst {x, y} = this.averagePosition();\n\n\t\t\treturn {\n\t\t\t\testimate: 1,\n\t\t\t\tx, y,\n\t\t\t\tvarX, varY\n\t\t\t};\n\t\t}\n\n\t\treturn {estimate: 0, x: 0, y: 0, varX: 1, varY: 1};\n\t}\n\n\t/**\n\t * Return the particle with the heighest weight\n\t * @return {Particle}\n\t */\n\tbestParticle() {\n\t\tlet best = this.particles[0];\n\n\t\tthis.particles.forEach((p) => {\n\t\t\tif (p.weight > best.weight) {\n\t\t\t\tbest = p;\n\t\t\t}\n\t\t});\n\n\t\treturn best;\n\t}\n\n\t/**\n\t * Return a weighted average of this particle set\n\t * @return {Object} x,y\n\t */\n\taveragePosition() {\n\n\t\tconst weights = normalizeWeights(this.particles.map((p) => p.weight));\n\n\t\treturn {\n\t\t\tx: this.particles.reduce((prev, p, i) => prev + (weights[i] * p.x), 0),\n\t\t\ty: this.particles.reduce((prev, p, i) => prev + (weights[i] * p.y), 0)\n\t\t};\n\t}\n\n\t/**\n\t * Return the particle variance in X and Y\n\t * @return {Object} varx, vary\n\t */\n\t_particleVariance() {\n\n\t\treturn {\n\t\t\tvarX: variance(this.particles, (p) => p.x),\n\t\t\tvarY: variance(this.particles, (p) => p.y)\n\t\t};\n\t}\n\n\t/**\n\t * Resample the particle set and return a given number of new particles\n\t * @param  {Number} nSamples Number of particles to return\n\t * @return {Array}\n\t */\n\t_resample(nSamples) {\n\t\tconst weights = this.particles.map(p => p.weight);\n\n\t\treturn lowVarianceSampling(nSamples, weights).map((i) => {\n\t\t\treturn {\n\t\t\t\tx: this.particles[i].x,\n\t\t\t\ty: this.particles[i].y,\n\t\t\t\tweight: 1\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Init the particle set\n\t *\n\t * Creates a set of particles distributed around x,y at a distance\n\t * following a normal distribution with r as mean.\n\t *\n\t * @param  {Number} x Center x\n\t * @param  {Number} y Center y\n\t * @param  {Number} r range\n\t * @return {void}\n\t */\n\t_randomParticles(n, x, y, r) {\n\n\t\tconst deltaTheta = 2 * Math.PI / n;\n\t\tconst particles = [];\n\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tconst theta = i * deltaTheta;\n\t\t\tconst range = r + randn(0, this.stdRange);\n\t\t\tconst {dx, dy} = polarToCartesian(range, theta);\n\n\t\t\tparticles.push({x: x + dx, y: y + dy, weight: 1});\n\t\t}\n\n\t\treturn particles;\n\t}\n\n\t/**\n\t * Update each particle by updating their weights\n\t * @param  {Number} x\n\t * @param  {Number} y\n\t * @param  {Number} r\n\t * @return {void}\n\t */\n\t_updateWeights(x, y, r) {\n\n\t\tthis.particles.forEach((p) => {\n\n\t\t\t//Calculate distance estimate\n\t\t\tconst dist = Math.sqrt(Math.pow(p.x - x, 2) + Math.pow(p.y - y, 2));\n\n\t\t\t//What is the probability of r given dist? p(r|dist)\n\t\t\t//Update the weight accordingly\n\t\t\t//p(r) = N(r|dist,sd)\n\n\t\t\tconst weight = pdfn(r, dist, this.stdRange);\n\n\t\t\tp.weight = p.weight * weight;\n\t\t});\n\t}\n}\n\nexport default LandmarkParticleSet;","import Particle from './particle';\nimport LandmarkInitializationSet from './landmark-init-set';\nimport { lowVarianceSampling, numberOfEffectiveParticles, normalizeWeights } from '../util/sampling';\n\nclass ParticleSet {\n\t/**\n\t * Create a new particle set with a given number of particles\n\t * @param  {int} nParticles    \t Number of particles\n\t * @param  {float} options.x     Initial x postion of user\n\t * @param  {float} options.y     Initial y position of user\n\t * @param  {float} options.theta Initial theta of user\n\t * @return ParticleSet\n\t */\n\tconstructor(nParticles, {x, y, theta}) {\n\t\tthis.nParticles = nParticles;\n\n\t\tthis.particleList = [];\n\n\t\t//Internal list to keep track of initialised landmarks\n\t\tthis.initialisedLandmarks = [];\n\t\tthis.landmarkInitSet = new LandmarkInitializationSet();\n\n\t\tfor (let i = 0; i < nParticles; i++) {\n\t\t\tthis.particleList.push(new Particle({x, y, theta}));\n\t\t}\n\t}\n\n\t/**\n\t * Given a control, let each particle sample a new user position\n\t * @param  {[type]} control [description]\n\t * @return {ParticleSet}\n\t */\n\tsamplePose(control) {\n\t\tthis.particleList.forEach((p) => p.samplePose(control));\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Let each particle process an observation\n\t * @param  {object} obs\n\t * @return {ParticleSet}\n\t */\n\tprocessObservation(obs) {\n\n\t\tif (obs !== {}) {\n\n\t\t\tconst { uid, r } = obs;\n\n\t\t\tif (this.initialisedLandmarks.indexOf(uid) == -1) {\n\n\t\t\t\tconst {x: uX, y: uY} = this.userEstimate();\n\n\t\t\t\tthis.landmarkInitSet.addMeasurement(uid, uX, uY, r);\n\n\t\t\t\tconst {estimate, x, y, varX, varY} = this.landmarkInitSet.estimate(uid);\n\n\t\t\t\tif (estimate > 0.6) {\n\n\t\t\t\t\tthis.particleList.forEach((p) => {\n\t\t\t\t\t\tp.addLandmark({uid, r}, {x, y}, {varX, varY});\n\t\t\t\t\t});\n\n\t\t\t\t\tthis.initialisedLandmarks.push(uid);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.particleList.forEach((p) => p.processObservation({uid, r}));\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Resample the internal particle list using their weights\n\t *\n\t * Uses a low variance sample\n\t * @return {ParticleSet}\n\t */\n\tresample() {\n\n\t\tconst weights = this.particleList.map(p => p.weight);\n\t\tif (numberOfEffectiveParticles(weights) < (this.nParticles * 0.5)) {\n\n\t\t\tthis.particleList = lowVarianceSampling(this.nParticles, weights).map((i) => {\n\t\t\t\treturn new Particle({}, this.particleList[i]);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tconsole.log('Not resampling');\n\t\t\tconsole.log(numberOfEffectiveParticles(weights));\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get particles\n\t * @return {[Array]\n\t */\n\tparticles() {\n\t\treturn this.particleList;\n\t}\n\n\t/**\n\t * Return the particle with the heighest weight\n\t * @return {Particle}\n\t */\n\tbestParticle() {\n\t\tlet best = this.particleList[0];\n\n\t\tthis.particleList.forEach((p) => {\n\t\t\tif (p.weight > best.weight) {\n\t\t\t\tbest = p;\n\t\t\t}\n\t\t});\n\n\t\treturn best;\n\t}\n\n\t/**\n\t * Compute an average of all landmark estimates\n\t * @return {Map}\n\t */\n\tlandmarkEstimate() {\n\t\tconst weights = normalizeWeights(this.particleList.map((p) => p.weight));\n\n\t\tconst landmarks = new Map();\n\n\t\t//Loop through all particles to get an estimate of the landmarks\n\t\tthis.particleList.forEach((p, i) => {\n\t\t\tp.landmarks.forEach((landmark, uid) => {\n\t\t\t\tif (!landmarks.has(uid)) {\n\t\t\t\t\tlandmarks.set(uid, {\n\t\t\t\t\t\tx: weights[i] * landmark.x,\n\t\t\t\t\t\ty: weights[i] * landmark.y,\n\t\t\t\t\t\tuid: uid\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst l = landmarks.get(uid);\n\n\t\t\t\t\tl.x += weights[i] * landmark.x;\n\t\t\t\t\tl.y += weights[i] * landmark.y;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn landmarks;\n\t}\n\n\t/**\n\t * Get the best estimate of the current user position\n\t * @return {object}\n\t */\n\tuserEstimate() {\n\t\tconst weights = normalizeWeights(this.particleList.map((p) => p.weight));\n\n\t\treturn {\n\t\t\tx: this.particleList.reduce((prev, p, i) => prev + (weights[i] * p.user.x), 0),\n\t\t\ty: this.particleList.reduce((prev, p, i) => prev + (weights[i] * p.user.y), 0)\n\t\t};\n\t}\n}\n\nexport default ParticleSet;","import User from './user';\nimport { randn, pdfn } from '../util/math';\n\nclass Particle {\n\t/**\n\t * Create a new particle\n\t * @param  {float} options.x     Initial x position of user\n\t * @param  {float} options.y     Initial y position of user\n\t * @param  {float} options.theta Initial theta of user\n\t * @return {Particle}\n\t */\n\tconstructor({x, y, theta}, parent = undefined) {\n\n\t\tif (parent !== undefined) {\n\t\t\tthis.user = User.copyUser(parent.user);\n\t\t\tthis.landmarks = this._copyMap(parent.landmarks);\n\t\t}\n\t\telse {\n\t\t\tthis.user = new User({x, y, theta});\n\t\t\tthis.landmarks = new Map();\n\t\t}\n\n\t\tthis.weight = 1;\n\t}\n\n\t/**\n\t * Given a control, sample a new user position\n\t * @param  {[type]} control [description]\n\t * @return {Particle}\n\t */\n\tsamplePose(control) {\n\n\t\t//Sample a pose from the 'control'\n\t\t//@todo Improve pose sampling\n\t\tconst r = Math.abs(randn(control.r, 0.3));\n\t\tconst theta = randn(control.theta, 0.05 * Math.PI);\n\n\t\tthis.user.move({r, theta});\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Reset the weight of the particle\n\t * @return {Particle}\n\t */\n\tresetWeight() {\n\t\tthis.weight = 1;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Register a new landmark\n\t * @param {string} options.uid\n\t * @param {float} options.r\n\t * @param {[type]} options.x \tInitial x position\n\t * @param {[type]} options.y    Initial y\n\t * @param {[type]} options.varX Cov in X direction\n\t * @param {[type]} options.varY Cov in Y direction\n\t */\n\taddLandmark({uid, r}, {x, y}, {varX, varY} = {varX: 1, varY: 1}) {\n\n\t\t//@todo find better values for initial covariance\n\t\tconst landmark = {\n\t\t\tx: x,\n\t\t\ty: y,\n\t\t\tcov: [[varX, 0], [0, varY]]\n\t\t};\n\n\t\tthis.landmarks.set(uid, landmark);\n\t}\n\n\t/**\n\t * Update a landmark using the EKF update rule\n\t * @param  {string} options.uid landmark id\n\t * @param  {float} options.r    range measurement\n\t * @return {void}\n\t */\n\tprocessObservation({uid, r}) {\n\n\t\t//Find the correct EKF\n\t\tconst l = this.landmarks.get(uid);\n\n\t\t//Compute the difference between the predicted user position of this\n\t\t//particle and the predicted position of the landmark.\n\t\tconst dx = this.user.x - l.x;\n\t\tconst dy = this.user.y - l.y;\n\n\t\t//@todo find better values for default coviarance\n\t\tconst errorCov = randn(2, 0.1);\n\n\t\tconst dist = Math.max(0.001, Math.sqrt((dx * dx) + (dy * dy)));\n\n\t\t//Compute innovation: difference between the observation and the predicted value\n\t\tconst v = r - dist;\n\n\t\t//Compute Jacobian\n\t\tconst H = [-dx / dist, -dy / dist];\n\n\t\t//Compute covariance of the innovation\n\t\t//covV = H * Cov_s * H^T + error\n\t\tconst HxCov = [l.cov[0][0] * H[0] + l.cov[0][1] * H[1],\n\t\t\t\t\t\tl.cov[1][0] * H[0] + l.cov[1][1] * H[1]];\n\n\t\tconst covV = (HxCov[0] * H[0]) + (HxCov[1] * H[1]) + errorCov;\n\n\t\t//Kalman gain\n\t\tconst K = [HxCov[0] * (1 / covV), HxCov[1] * (1.0 / covV)];\n\n\t\t//Calculate the new position of the landmark\n\t\tconst newX = l.x + (K[0] * v);\n\t\tconst newY = l.y + (K[1] * v);\n\n\t\t//Calculate the new covariance\n\t\t//cov_t = cov_t-1 - K * covV * K^T\n\t\tconst updateCov = [\n\t\t\t[K[0] * K[0] * covV, K[0] * K[1] * covV],\n\t\t\t[K[1] * K[0] * covV, K[1] * K[1] * covV]\n\t\t];\n\n\t\tconst newCov = [[l.cov[0][0] - updateCov[0][0], l.cov[0][1] - updateCov[0][1]],\n\t\t\t\t\t\t[l.cov[1][0] - updateCov[1][0], l.cov[1][1] - updateCov[1][1]]];\n\n\t\t//Update the weight of the particle\n\t\t//this.weight = this.weight - (v * (1.0 / covV) * v);\n\t\tthis.weight = this.weight * pdfn(r, dist, covV);\n\n\t\t//Update particle\n\t\tl.x = newX;\n\t\tl.y = newY;\n\t\tl.cov = newCov;\n\t}\n\n\t/**\n\t * Deep copy a mpa\n\t * @param  {Map} map\n\t * @return {Map}\n\t */\n\t_copyMap(map) {\n\t\tconst copy = new Map();\n\n\t\tfor (let [key, value] of map.entries()) {\n\t\t\tcopy.set(key, this._copyLandmark(value));\n\t\t}\n\n\t\treturn copy;\n\t}\n\n\t/**\n\t * Deep copy a landmark\n\t * @param  {object} landmark\n\t * @return {landmark}\n\t */\n\t_copyLandmark(landmark) {\n\t\tlet copy = {};\n\n\t\tcopy.x = landmark.x;\n\t\tcopy.y = landmark.y;\n\t\tcopy.cov = [...landmark.cov];\n\n\t\treturn copy;\n\t}\n}\n\nexport default Particle;","class Sensor {\n\t/**\n\t * Sensor\n\t * @param  {int} options.n\n\t * @param  {int} options.txPower\n\t * @param  {int} options.noise\n\t * @param  {int} options.range\n\t * @return {Senser}\n\t */\n\tconstructor({n, txPower, noise, range}) {\n\t\tthis.landmarks = new Map();\n\t\tthis.iteration = 0;\n\t\tthis.landmarkConfig = {n, txPower, noise, range};\n\t}\n\n\t/**\n\t * Process a new observation\n\t * @param {string} options.uid\n\t * @param {float} options.rssi\n\t */\n\taddObservation({uid, rssi}) {\n\t\tif (this.landmarks.has(uid)) {\n\t\t\tthis._updateLandmark(uid, rssi);\n\t\t}\n\t\telse {\n\t\t\tthis._registerLandmark(uid, rssi);\n\t\t}\n\t}\n\n\t/**\n\t * Get all averaged observations since the last request\n\t *\n\t * Updates the interal iteration counter\n\t * @return {Array}\n\t */\n\tgetObservations() {\n\t\tconst observedLandmarks = [];\n\n\t\t//Get all the landmarks that have been upated during the current iteration\n\t\tthis.landmarks.forEach((l, uid) => {\n\t\t\tif (l.iteration === this.iteration) {\n\t\t\t\tobservedLandmarks.push({uid, r: this._rssiToDistance(l.rssi)});\n\t\t\t}\n\t\t});\n\n\t\tthis.iteration++;\n\n\t\treturn observedLandmarks;\n\t}\n\n\t/**\n\t * Update a landmark given a new rssi observation\n\t * @param  {float} uid\n\t * @param  {float} rssi\n\t * @return {void}\n\t */\n\t_updateLandmark(uid, rssi) {\n\n\t\tconst landmark = this.landmarks.get(uid);\n\t\tconst alpha = this._computeAlpha(rssi, landmark.iteration);\n\n\t\tlandmark.rssi = (rssi * alpha) + (landmark.rssi * (1 - alpha));\n\t\tlandmark.iteration = this.iteration;\n\t}\n\n\t/**\n\t * Add a new landmark to the interal list\n\t * @param  {string} uid  Landanme uid\n\t * @param  {float} rssi  Current RSSI value\n\t * @return {void}\n\t */\n\t_registerLandmark(uid, rssi) {\n\t\tthis.landmarks.set(uid, {\n\t\t\tuid: uid,\n\t\t\trssi: rssi,\n\t\t\titeration: this.iteration\n\t\t});\n\t}\n\n\t/**\n\t * Compute the alpha for the exponential weigthed average\n\t * @param  {float} rssi\n\t * @param  {int} previousIteration\n\t * @return {float}\n\t */\n\t_computeAlpha(rssi, previousIteration) {\n\t\t//See http://www.hindawi.com/journals/ijdsn/aa/195297/\n\t\t//Alpha is based on the RSSI (larger values means larger alpha)\n\t\t//The difference in time defines the maximum value of alpha, this increases\n\t\t//with the time between the previous observation.\n\t\t//\n\t\t//@todo Currently we only use the timediff\n\t\tconst timeDiff = Math.max(this.iteration - previousIteration, 1);\n\n\t\tconst timeFactor = 1 - (1 / (Math.pow(timeDiff, 1.5) + 1));\n\n\t\t//const rssiFactor = Math.min(1, 1 - (0.5 * ((-10 - rssi) / 60)));\n\n\t\treturn timeFactor;\n\t}\n\n\t/**\n\t * Convert RSSI to a distance estimate\n\t * @param  {float} rssi\n\t * @return {float}\n\t */\n\t_rssiToDistance(rssi) {\n\t\treturn Math.pow(10, (rssi - this.landmarkConfig.txPower) / (-10 * this.landmarkConfig.n));\n\t}\n}\n\nexport default Sensor;","import { polarToCartesian } from '../util/coordinate-system';\nimport LinkedList from '../util/linked-list';\n\nclass User {\n\t/**\n\t * Create a new user\n\t * @param  {float} options.x     Starting x location of the user\n\t * @param  {float} options.y     Starting y location of the user\n\t * @param  {float} options.theta Direction of the user in radials relative to the x-axis\n\t * @param  {LinkedList} trace \t Optional trace to extend\n\t * @return {User}\n\t */\n\tconstructor({x, y, theta}, trace = undefined) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.theta = theta;\n\n\t\tif (trace === undefined) {\n\t\t\tthis.trace = new LinkedList().add({x, y, theta});\n\t\t}\n\t\telse {\n\t\t\t//We use a LinkedList here to make use of the reference to the\n\t\t\t//trace instead of copying the whole list\n\t\t\tthis.trace = new LinkedList(trace);\n\t\t}\n\t}\n\n\t/**\n\t * Move a user to a new position\n\t * @param  {float} r\n\t * @param  {float} theta\n\t * @return {User}\n\t */\n\tmove({r, theta}) {\n\n\t\tconst {dx, dy} = polarToCartesian(r, theta);\n\n\t\tthis.x += dx;\n\t\tthis.y += dy;\n\t\tthis.theta = theta;\n\n\t\tthis.trace.add({x: this.x, y: this.y, theta: this.theta});\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Safely copy a user object\n\t * @param  {User} user User to copy\n\t * @return {User}\n\t */\n\tstatic copyUser(user) {\n\t\treturn new User({\n\t\t\tx: user.x,\n\t\t\ty: user.y,\n\t\t\ttheta: user.theta\n\t\t}, user.trace);\n\t}\n}\n\nexport default User;","class VoteAccumulator {\n\n\t/**\n\t * Create new voting system\n\t * @param  {Number} dimension Size of the voting matrix coordinate system\n\t * @param  {Number} precision Defines amount of cells by dimension/precision\n\t * @param  {Number} startX    Center of the voting matrix\n\t * @param  {Number} startY    Center of the voting matrix\n\t * @return {VoteAccumulator}\n\t */\n\tconstructor(dimension, precision, startX = 0, startY = 0) {\n\t\tthis.dimension = dimension;\n\t\tthis.precision = precision;\n\t\tthis.centerX = startX;\n\t\tthis.centerY = startY;\n\n\t\tthis.measurements = 0;\n\t\tthis.size = Math.round(dimension / precision);\n\n\t\tthis.votes = new Array(this.size).fill(0).map(() => new Array(this.size).fill(0));\n\t}\n\n\taddMeasurement(x, y, r) {\n\n\t\tthis.measurements++;\n\n\t\tx = x - this.centerX;\n\t\ty = y - this.centerY;\n\n\t\tif (!this._inRange(x, y)) {\n\t\t\tconsole.error('Coordinates not in range of VoteAccumulator internal cell matrix ' +\n\t\t\t\t\t\t\t`with x:${x}, y:${y} and centerX:${this.centerX}, centerY:${this.centerY}.`);\n\t\t}\n\n\t\tif (!this._inRange(x + r, y) || !this._inRange(x, y + r)) {\n\t\t\tconsole.error('Range measurement not in range of VoteAccumulator internal cell matrix.');\n\t\t}\n\n\t\t//Get the current center\n\t\tconst {row, column} = this._cartesianToCell(x, y);\n\n\t\t//Convert the range to cell distance\n\t\tconst dist = Math.round(r / this.precision);\n\n\t\t//Add votes according to midpoint circle algorithm\n\t\tthis._midpointCircle(row, column, dist);\n\n\t\treturn this;\n\t}\n\n\tpositionEstimate() {\n\t\tif (this.measurements < 3) {\n\t\t\treturn {estimate: 0, x: 0, y: 0};\n\t\t}\n\n\t\tlet firstValue = 0;\n\t\tlet firstCell = {};\n\t\tlet secondValue = 0;\n\t\tlet secondCell = {};\n\n\t\tfor (let row = 0; row < this.size; row++) {\n\t\t\tfor (let column = 0; column < this.size; column++) {\n\t\t\t\tif (this.votes[row][column] > firstValue) {\n\t\t\t\t\tfirstValue = this.votes[row][column];\n\t\t\t\t\tfirstCell = {row, column};\n\t\t\t\t}\n\t\t\t\telse if (this.votes[row][column] > secondValue) {\n\t\t\t\t\tsecondValue = this.votes[row][column];\n\t\t\t\t\tsecondCell = {row, column};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst {x, y} = this._cellToCartesian(firstCell.row, firstCell. column);\n\n\t\treturn {\n\t\t\testimate: (firstValue / (firstValue + secondValue)),\n\t\t\tx, y\n\t\t};\n\t}\n\n\t/**\n\t * Return a string representation of the vote matrix\n\t * @return {String}\n\t */\n\ttoString() {\n\t\treturn this.votes.reduce((output, row) => {\n\t\t\treturn output + row.reduce((rowOutput, cell) => {\n\t\t\t\tif (cell > 9) {\n\t\t\t\t\treturn rowOutput + cell + ' ';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn rowOutput + cell + '  ';\n\t\t\t\t}\n\t\t\t}) + '\\n';\n\t\t}, '\\n');\n\t}\n\n\t/**\n\t * Return true when an cartesian coordinate is in range\n\t * @param  {Number} x\n\t * @param  {Number} y\n\t * @return {Boolean}\n\t */\n\t_inRange(x, y) {\n\t\treturn (\n\t\t\t\tx >= (-0.5 * this.dimension) &&\n\t\t\t\tx <= (0.5 * this.dimension) &&\n\t\t\t\ty >= (-0.5 * this.dimension) &&\n\t\t\t\ty <= (0.5 * this.dimension)\n\t\t);\n\t}\n\n\t/**\n\t * Place votes based on the midpoint circle algorithm\n\t * @param  {Number} row    Center\n\t * @param  {Number} column Center\n\t * @param  {Number} r      Radius\n\t * @return {void}\n\t */\n\t_midpointCircle(row, column, r) {\n\n\t\tlet x = r;\n\t\tlet y = 0;\n\t\tlet radiusError = 1 - x;\n\n\t\twhile (x >= y) {\n\t\t\tthis._vote(y + row,  x + column);\n\t\t\tthis._vote(y + row, -x + column);\n\t\t\tthis._vote(-y + row, -x + column);\n\t\t\tthis._vote(-y + row,  x + column);\n\n\t\t\tif (x != y) {\n\t\t\t\tthis._vote(x + row,  y + column);\n\t\t\t\tthis._vote(x + row, -y + column);\n\t\t\t\tthis._vote(-x + row, -y + column);\n\t\t\t\tthis._vote(-x + row,  y + column);\n\t\t\t}\n\n\t\t\ty++;\n\n\t\t\tif (radiusError < 0) {\n\t\t\t\tradiusError += 2 * y + 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tx--;\n\t\t\t\tradiusError += 2 * (y - x) + 1;\n\t\t\t}\n\t\t}\n\n\t\t//At the ends of the cross, we have double votes, substract these\n\t\tthis._vote(row + r, column, -1);\n\t\tthis._vote(row - r, column, -1);\n\t\tthis._vote(row, column + r, -1);\n\t\tthis._vote(row, column - r, -1);\n\t}\n\n\t/**\n\t * Increase votes at a specific cell\n\t * @param  {Number} row\n\t * @param  {Number} column\n\t * @return {void}\n\t */\n\t_vote(row, column, value = 1) {\n\n\t\tif (row >= this.size || column >= this.size || row < 0 || column < 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.votes[row][column] +=  value;\n\n\t\t/*if (row > 0) {\n\t\t\tthis.votes[row - 1][column] += value;\n\n\t\t\tif (column > 0) {\n\t\t\t\tthis.votes[row - 1][column - 1] += value;\n\t\t\t}\n\t\t\tif (column < (this.size - 1)) {\n\t\t\t\tthis.votes[row - 1][column + 1] += value;\n\t\t\t}\n\t\t}\n\n\t\tif (row < (this.size - 1)) {\n\t\t\tthis.votes[row + 1][column] += value;\n\n\t\t\tif (column > 0) {\n\t\t\t\tthis.votes[row + 1][column - 1] += value;\n\t\t\t}\n\t\t\tif (column < (this.size - 1)) {\n\t\t\t\tthis.votes[row + 1][column + 1] += value;\n\t\t\t}\n\t\t}\n\n\t\tif (column > 0) {\n\t\t\tthis.votes[row][column - 1] += value;\n\t\t}\n\n\t\tif (column < (this.size - 1)) {\n\t\t\tthis.votes[row][column + 1] += value;\n\t\t}*/\n\t}\n\n\t/**\n\t * Convert a cartesian coordinate to a specific cell\n\t * @param  {float} x\n\t * @param  {float} y\n\t * @return {object}\n\t */\n\t_cartesianToCell(x, y) {\n\t\treturn {\n\t\t\tcolumn: Math.floor((x + (0.5 * this.dimension)) / this.precision),\n\t\t\trow: Math.floor((y + (0.5 * this.dimension)) / this.precision)\n\t\t};\n\t}\n\n\t/**\n\t * Convert a cell to cartesian coordinates\n\t * @param  {int} row\n\t * @param  {int} column\n\t * @return {object}\n\t */\n\t_cellToCartesian(row, column) {\n\t\treturn {\n\t\t\tx: ((column + 0.5) * this.precision) - (0.5 * this.dimension),\n\t\t\ty: ((row + 0.5) * this.precision) - (0.5 * this.dimension)\n\t\t};\n\t}\n}\n\nexport default VoteAccumulator;","import { log, randn } from '../util/math';\n\nexport class SimulatedLandmarkSet {\n\n\t/**\n\t * Create simulated landmarks\n\t * @param  {Number} N              Amount of landmarks\n\t * @param  {Number} options.xRange Max x\n\t * @param  {Number} options.yRange Max y\n\t * @param  {Number} updateRate     Refresh rate\n\t * @param  {Object} landmarkConfig Landmark config\n\t * @return {SimulatedLandmarkSet}\n\t */\n\tconstructor(N, {xRange, yRange}, updateRate, landmarkConfig) {\n\t\tthis.landmarks = [];\n\t\tthis.xRange = xRange;\n\t\tthis.yRange = yRange;\n\t\tthis.updateRate = updateRate;\n\t\tthis.landmarkConfig = landmarkConfig;\n\t\tthis.broadcastId = undefined;\n\n\t\tfor (let i = 0; i < N; i++) {\n\t\t\tthis.landmarks.push(this._randomLandmark('landmark-' + i));\n\t\t}\n\t}\n\n\t/**\n\t * Start broadcasting landmark data\n\t * @param  {Sensor} sensor\n\t * @param  {User} user\n\t * @return {void}\n\t */\n\tstartBroadcast(sensor, user) {\n\t\tthis.broadcastId = window.setTimeout(() => this._broadCast(sensor, user), this.updateRate);\n\t}\n\n\t/**\n\t * Stop broadcast of landmark data\n\t * @return {void}\n\t */\n\tstopBroadCast() {\n\t\tif (this.broadcastId !== undefined) {\n\t\t\twindow.clearTimeout(this.broadcastId);\n\t\t}\n\t}\n\n\t/**\n\t * Set the update rate of the landmarks\n\t * @param {float} updateRate\n\t * @return {SimulatedLandmarkSet}\n\t */\n\tsetUpdateRate(updateRate) {\n\t\tthis.updateRate = updateRate;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Simulate RSSI measurements for all landmarks in range\n\t * @param  {float} x\n\t * @param  {float} y\n\t * @return {Array}\n\t */\n\tmeasurementsAtPoint(x, y) {\n\t\tconst landmarks = this.landmarksInRange(x, y);\n\t\tconst measurements = [];\n\n\t\treturn landmarks.forEach((l) => measurements.push({uid: l.uid, rssi: l.rssiAt(x, y)}));\n\t}\n\n\t/**\n\t * Get a random measurement from a device in range\n\t * @param  {float} x\n\t * @param  {float} y\n\t * @return {object}\n\t */\n\trandomMeasurementAtPoint(x, y) {\n\t\tconst landmarks = this.landmarksInRange(x, y);\n\n\t\tif (landmarks.length > 0) {\n\t\t\tconst landmark = landmarks[Math.floor(Math.random() * landmarks.length)];\n\n\t\t\treturn {uid: landmark.uid, rssi: landmark.rssiAt(x, y)};\n\t\t}\n\t}\n\n\t/**\n\t * Return all landmarks within range of a given x,y position\n\t * @param  {float} x\n\t * @param  {float} y\n\t * @return {Array}\n\t */\n\tlandmarksInRange(x, y) {\n\t\treturn this.landmarks.filter((l) => l.isInRange(x, y));\n\t}\n\n\t/**\n\t * Create a landmark at a random position\n\t * @param  {string} uid UID\n\t * @return {Landmark}\n\t */\n\t_randomLandmark(uid) {\n\t\treturn new Landmark(uid, {\n\t\t\tx: Math.random() * (2 * this.xRange) - this.xRange,\n\t\t\ty: Math.random() * (2 * this.yRange) - this.yRange\n\t\t}, this.landmarkConfig);\n\t}\n\n\t/**\n\t * Simulate a broadcast\n\t *\n\t * Sets a timeout to run this function again after a fixed amount of time\n\t * @param  {Sensor} sensor\n\t * @param  {User} user\n\t * @return {void}\n\t */\n\t_broadCast(sensor, user) {\n\n\t\tconst measurement = this.randomMeasurementAtPoint(user.x, user.y);\n\n\t\tif (measurement !== undefined) {\n\t\t\tsensor.addObservation(measurement);\n\t\t}\n\n\t\tthis.broadcastId = window.setTimeout(() => this._broadCast(sensor, user), this.updateRate);\n\t}\n\n\t/**\n\t * Get a landmark by its uid\n\t * @param  {string} uid\n\t * @return {Landmark}\n\t */\n\tlandmarkByUid(uid) {\n\t\tfor (let i = 0; i < this.landmarks.length; i++) {\n\t\t\tif (this.landmarks[i].uid == uid) {\n\t\t\t\treturn this.landmarks[i];\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass Landmark {\n\t/**\n\t * Landmark\n\t * @param  {string} uid             UID of the landmark\n\t * @param  {float} options.x        Current x position\n\t * @param  {float} options.y        Current y position\n\t * @param  {int} options.n          Path loss exponent\n\t * @param  {int} options.txPower    Transmit power\n\t * @param  {float} options.noise    Noise level\n\t * @param  {int} options.range      Range\n\t * @return {Landmark}\n\t */\n\tconstructor(uid, {x, y}, {n, txPower, noise, range}) {\n\t\tthis.uid = uid;\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.landmarkRange = range;\n\t\tthis.n = n;\n\t\tthis.txPower = txPower;\n\t\tthis.noise = noise;\n\t}\n\n\t/**\n\t * Returns true when a point x,y is in range\n\t * @param  {float}  x\n\t * @param  {float}  y\n\t * @return {Boolean}\n\t */\n\tisInRange(x, y) {\n\t\treturn this.distanceTo(x, y) <= this.landmarkRange;\n\t}\n\n\t/**\n\t * Distance from this landmark to a x,y point\n\t * @param  {float} x\n\t * @param  {float} y\n\t * @return {float}\n\t */\n\tdistanceTo(x, y) {\n\t\treturn Math.sqrt(Math.pow(this.x - x, 2) + Math.pow(this.y - y, 2));\n\t}\n\n\t/**\n\t * RSSI value without noise at x,y point\n\t * @param  {float} x\n\t * @param  {float} y\n\t * @return {float} RSSI value\n\t */\n\trssiAtRaw(x, y) {\n\t\treturn this.txPower - ((10 * this.n) *  log(Math.max(this.distanceTo(x, y), 0.1), 10));\n\t}\n\n\t/**\n\t * RSSI with noise at x,y point\n\t * @param  {float} x\n\t * @param  {float} y\n\t * @return {float}\n\t */\n\trssiAt(x, y) {\n\t\treturn this.rssiAtRaw(x, y) + randn(0, this.noise);\n\t}\n}\n\n/**\n * Convert RSSI to distance\n * @param  {float} rssi\n * @param  {object} landmarkConfig Should at least contain a txPower and n field\n * @return {float}\n */\nexport function rssiToDistance(rssi, landmarkConfig) {\n\treturn Math.pow(10, (rssi - landmarkConfig.txPower) / (-10 * landmarkConfig.n));\n}","import User from '../models/user';\nimport { randn } from '../util/math';\nimport { polarToCartesian, cartesianToPolar, addTheta } from '../util/coordinate-system';\n\nclass SimulatedUser extends User {\n\t/**\n\t * Create a simulated user\n\t * @param  {object} position     Position of the user\n\t * @param  {int} v               Speed of the user\n\t * @param  {int} options.xRange  Max range in x direction (both - and +)\n\t * @param  {int} options.yRange  Max range in y direciotn (both - and +)\n\t * @param  {int} options.padding Padding substracted from the max range\n\t * @return {SimulatedUser}\n\t */\n\tconstructor(position, v, {xRange, yRange, padding}) {\n\t\tsuper(position);\n\n\t\tthis.v = v;\n\t\tthis.xRange = xRange;\n\t\tthis.yRange = yRange;\n\t\tthis.padding = padding;\n\n\t\tthis.lastControl = {r: 0, theta: 0};\n\t\tthis.iteration = 0;\n\t}\n\n\tsetPath(distances, angles) {\n\t\tthis.distances = distances;\n\t\tthis.angles = angles;\n\t}\n\n\t/**\n\t * Make a semi-random warlk\n\t * @return {SimulatedUser}\n\t */\n\trandomWalk() {\n\t\tlet {r, theta} = this._newStep();\n\n\t\t//Save the current x,y locally\n\t\tconst lastX = this.x;\n\t\tconst lastY = this.y;\n\n\t\tconst {dx, dy} = polarToCartesian(r, addTheta(theta, this.theta));\n\n\t\tconst newX = this._constrainCoordinate(lastX + dx, this.xRange - this.padding, -this.xRange + this.padding);\n\t\tconst newY = this._constrainCoordinate(lastY + dy, this.yRange - this.padding, -this.yRange + this.padding);\n\n\t\t//Compute the new control\n\t\tlet control = cartesianToPolar(newX - lastX, newY - lastY);\n\n\t\t//Move to the new position\n\t\tthis.move({r: control.r, theta: control.theta});\n\n\t\tthis.lastControl = {r: control.r, theta: control.theta};\n\n\t\treturn this;\n\t}\n\n\tgetLastControl() {\n\t\treturn this.lastControl;\n\t}\n\n\t/**\n\t * Constrain a value using a max,min value\n\t * @param  {Number} value\n\t * @param  {Number} max\n\t * @param  {Number} min\n\t * @return {Number}\n\t */\n\t_constrainCoordinate(value, max, min) {\n\t\tif (value > max) {\n\t\t\treturn max;\n\t\t}\n\t\telse if (value < min) {\n\t\t\treturn min;\n\t\t}\n\n\t\treturn value;\n\t}\n\t/**\n\t * Generate a new step\n\t * @return {object}\n\t */\n\t_newStep() {\n\t\tif (this.distances !== undefined && this.angles !== undefined) {\n\t\t\tif (this.iteration < this.distances.length) {\n\t\t\t\tconst step = {r: this.distances[this.iteration], theta: this.angles[this.iteration]};\n\t\t\t\tthis.iteration++;\n\n\t\t\t\treturn step;\n\t\t\t}\n\t\t\telse if (this.iteration == this.distances.length) {\n\t\t\t\tconsole.debug('Simulater reached end of trace data');\n\n\t\t\t\treturn {r: 0, theta: 0};\n\t\t\t}\n\n\t\t\tthis.iteration++;\n\t\t}\n\n\t\treturn {r: Math.abs(randn(this.v, 1)), theta: randn(0.1, 0.2)};\n\t}\n}\n\nexport default SimulatedUser;","/**\n * Add two radials\n * @param {float} t1\n * @param {float} t2\n * @return {float} Sum of t1 and t2\n */\nexport function addTheta(t1, t2) {\n\tlet theta = t1 + t2;\n\tconst twoPi = Math.PI * 2;\n\n\tif (theta > (twoPi)) {\n\t\ttheta -= twoPi;\n\t}\n\telse if (theta < 0) {\n\t\ttheta += twoPi;\n\t}\n\n\treturn theta;\n}\n\n/**\n * Convert polar coordinates to cartesian coordinates\n * @param  {float} r\n * @param  {float} theta\n * @return {object}\n */\nexport function polarToCartesian(r, theta) {\n\tconst dx = r * Math.cos(theta);\n\tconst dy = r * Math.sin(theta);\n\n\treturn {dx, dy};\n}\n\n/**\n * Convert cartesian coordiantes to polar coordinates\n * @param  {float} dx  x value from 0,0\n * @param  {float} dy  y value from 0,0\n * @return {object}\n */\nexport function cartesianToPolar(dx, dy) {\n\n\tconst r = Math.sqrt((dx * dx) + (dy * dy));\n\n\tlet theta;\n\n\t//Theta can be computed using tan^-1 when x != 0\n\tif (dx !== 0) {\n\t\ttheta = Math.atan(dy / dx);\n\n\t\t//Compensate for negative values of dx and dy\n\t\tif (dx < 0) {\n\t\t\ttheta += Math.PI;\n\t\t}\n\t\telse if (dy < 0) {\n\t\t\ttheta += 2 * Math.PI;\n\t\t}\n\t}\n\telse {\n\t\tif (dy >= 0) {\n\t\t\ttheta = 0;\n\t\t}\n\t\telse {\n\t\t\ttheta = -Math.PI;\n\t\t}\n\t}\n\n\treturn {r, theta};\n}\n\n/**\n * Convert a value in degrees to a radian value\n * @param  {Number} degrees\n * @return {Number}\n */\nexport function degreeToRadian(degrees) {\n\treturn degrees * (Math.PI / 180);\n}\n\n/**\n * Finds the smallest rotation to the local north (wich is 90deg on a radial axis)\n * @param  {Number} degrees\n * @return {Number}\n */\nexport function rotationToLocalNorth(degrees) {\n\n\tconst left = degrees - 90;\n\tconst right = 360 - degrees + 90;\n\n\treturn Math.min(left, right);\n}","class LinkedList {\n\t/**\n\t * Create a new linked linst\n\t * @param  {LinkedList} base The previous link\n\t * @return LinkedList\n\t */\n\tconstructor(base = undefined) {\n\t\tif (base !== undefined && typeof base != 'object') {\n\t\t\tconsole.error('Base must be a LinkedList');\n\t\t}\n\n\t\tthis.list = [base];\n\t}\n\n\tadd(element) {\n\t\tthis.list.push(element);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Return a flat array of the linked list\n\t * @return {Array}\n\t */\n\tvalues() {\n\t\tlet values = [];\n\n\t\t//First element of the list is another list or undefined\n\t\tif (this.list[0] !== undefined) {\n\t\t\tvalues = this.list[0].values();\n\t\t}\n\n\t\tvalues = values.concat(this.list.slice(1));\n\n\t\treturn values;\n\t}\n\n\t/**\n\t * Only return the elements of this list and not of its parents\n\t * @return {Array}\n\t */\n\tcurrentValues() {\n\t\treturn this.list.slice(1);\n\t}\n\n\t/**\n\t * Return true when this parent has a parent list\n\t * @return {Boolean}\n\t */\n\thasParent() {\n\t\treturn this.list[0] !== undefined;\n\t}\n\n\t/**\n\t * Return the last object in the list\n\t * @return {mixed}\n\t */\n\tlast() {\n\t\treturn this.list[this.list.length - 1];\n\t}\n\n\t/**\n\t * Return the base of this linked list\n\t * @return {undefined|LinkedList}\n\t */\n\tgetBase() {\n\t\treturn this.list[0];\n\t}\n}\n\nexport default LinkedList;","/**\n * Random following normal distribution\n * @param  {float} mean mean\n * @param  {float} sd   standard deviation\n * @return {float}\n */\nexport function randn(mean, sd) {\n\n\t//Retrieved from jStat\n\tlet u;\n\tlet v;\n\tlet x;\n\tlet y;\n\tlet q;\n\n\tdo {\n\t\tu = Math.random();\n\t\tv = 1.7156 * (Math.random() - 0.5);\n\t\tx = u - 0.449871;\n\t\ty = Math.abs(v) + 0.386595;\n\t\tq = x * x + y * (0.19600 * y - 0.25472 * x);\n\t} while (q > 0.27597 && (q > 0.27846 || v * v > -4 * Math.log(u) * u * u));\n\n\treturn (v / u) * sd + mean;\n}\n\n/**\n * pdf for a normal distribution\n * @param  {Number} x\n * @param  {Number} mean\n * @param  {Number} sd\n * @return {Number}\n */\nexport function pdfn(x, mean, sd) {\n\treturn (1 / (sd * Math.sqrt(2 * Math.PI))) * Math.exp(-(Math.pow(x - mean, 2)) / (2 * sd * sd));\n}\n\n/**\n * Compute the log with a given base\n *\n * Used primarily as log10 is not implemented yet on mobile browsers\n * @param  {int}\n * @param  {int}\n * @return {float}\n */\nexport function log(x, base) {\n\treturn Math.log(x) / Math.log(base);\n}\n\n/**\n * Calculates two eigenvalues and eigenvectors from a 2x2 covariance matrix\n * @param  {Array} cov\n * @return {object}\n */\nexport function eigenvv(cov) {\n\n\tconst a = cov[0][0];\n\tconst b = cov[0][1];\n\tconst c = cov[1][0];\n\tconst d = cov[1][1];\n\n\tconst A = 1;\n\tconst B = -(a + d);\n\n\t//const C = (a * d) - (c * b);\n\n\tconst L1 = (-B + Math.sqrt((Math.pow(a - d, 2) + (4 * c * d))) / 2 * A);\n\tconst L2 = (-B - Math.sqrt((Math.pow(a - d, 2) + (4 * c * d))) / 2 * A);\n\n\tconst y1 = (L1 - a) / b;\n\tconst y2 = (L2 - a) / b;\n\tconst mag1 = Math.sqrt(1 + (y1 * y1));\n\tconst mag2 = Math.sqrt(1 + (y2 * y2));\n\n\treturn {\n\t\tvalues: [L1, L2],\n\t\tvectors: [[1 / mag1, y1 / mag1], [1 / mag2, y2 / mag2]]\n\t};\n}\n\n/**\n * Calculate the variance of an array given a value function\n * @param  {Array} data\n * @param  {Function} valueFunc Function that maps an array element to a number\n * @return {Number}\n */\nexport function variance(data, valueFunc) {\n\n\tlet sum = 0;\n\tlet sumSq = 0;\n\tconst n = data.length;\n\n\tdata.forEach((d) => {\n\n\t\tconst value = valueFunc(d);\n\n\t\tsum += value;\n\t\tsumSq += (value * value);\n\t});\n\n\treturn (sumSq - ((sum * sum) / n)) / n;\n}","/**\n * Normalize a set of weights\n * @param  {Array} weights\n * @return {Array}\n */\nexport function normalizeWeights(weights) {\n\tconst totalWeight = weights.reduce((total, w) => total + w, 0);\n\n\treturn weights.map(w => w / totalWeight);\n}\n\n/**\n * Convert an array of weights to an cumulative sum array\n * @param  {Array} weights\n * @return {Array}\n */\nexport function weightedCumulativeSum(weights) {\n\n\tconst normalisedWeights = normalizeWeights(weights);\n\n\tlet total = 0;\n\treturn normalisedWeights.map(w => {\n\t\ttotal = w + total;\n\t\treturn total;\n\t});\n}\n\n/**\n * Samples a new set using a low variance sampler from a array of weights\n * @param {Number} nSamples Number of samples to sample\n * @param {Array} weights \tWeight array\n * @return {Array} An array with indices corresponding to the selected weights\n */\nexport function lowVarianceSampling(nSamples, weights) {\n\n\tconst M = weights.length;\n\tconst normalizedWeights = normalizeWeights(weights);\n\n\tconst rand = Math.random() * (1 / M);\n\n\tlet c = normalizedWeights[0];\n\tlet i = 0;\n\n\tconst set = [];\n\n\tfor (let m = 1; m <= nSamples; m++) {\n\t\tconst U = rand + (m - 1) * (1 / M);\n\n\t\twhile (U > c) {\n\t\t\ti = i + 1;\n\t\t\tc = c + normalizedWeights[i];\n\t\t}\n\n\t\tset.push(i);\n\t}\n\n\treturn set;\n}\n\n/**\n * Sample using roulette wheel sampler from a array of weights\n * @param {Number} nSamples Number of samples to sample\n * @param {Array} weights \tWeight array\n * @return {Array} An array with indices corresponding to the selected weights\n */\nexport function rouletteWheelSampling(nSamples, weights) {\n\n\tconst stackedWeights = weightedCumulativeSum(weights);\n\tconst set = [];\n\n\tfor (let i = 0; i < nSamples; i++) {\n\n\t\tconst rand = Math.random();\n\n\t\tfor (var m = 0; m < stackedWeights.length; m++) {\n\n\t\t\tif (stackedWeights[m] >= rand) {\n\t\t\t\tset.push(m);\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn set;\n}\n\n/**\n * Calculate the effective number of particles\n * @see http://en.wikipedia.org/wiki/Particle_filter#Sequential_importance_resampling_.28SIR.29\n * @return {Number}\n */\nexport function numberOfEffectiveParticles(weights) {\n\tconst normalisedWeights = normalizeWeights(weights);\n\n\treturn 1 / normalisedWeights.reduce((total, w) => total + (w * w));\n}","import { eigenvv } from '../util/math';\n\nclass Visualizer {\n\n\t/**\n\t * Create new visualizer\n\t * @param  {String} element Id of the canvas\n\t * @param  {Number} xMax\n\t * @param  {Number} yMax\n\t * @return {Visualizer}\n\t */\n\tconstructor(element, xMax, yMax) {\n\t\tthis.element = element;\n\t\tthis.xMax = xMax;\n\t\tthis.yMax = yMax;\n\n\t\tthis.canvas = document.getElementById(element);\n\t\tthis.ctx = this.canvas.getContext('2d');\n\n\t\tthis._scaleCanvas();\n\t}\n\n\t/**\n\t * Plot the particle set\n\t * @param  {ParticleSet} particleSet\n\t * @return {Visualizer}\n\t */\n\tplotParticleSet(particleSet) {\n\n\t\tconst best = particleSet.bestParticle();\n\n\t\t//Plot user traces\n\t\tparticleSet.particles().forEach((p) => {\n\t\t\tif (p !== best) {\n\t\t\t\tthis.plotUserTrace(p.user);\n\t\t\t}\n\t\t});\n\n\t\t//Plot best last\n\t\tthis.plotUserTrace(best.user, '#11913E');\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clear the canvas\n\t * @return {Visualizer}\n\t */\n\tclearCanvas() {\n\t\tthis.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Plot a user object on the canvas\n\t * @param  {User} user\n\t * @param  {String} color\n\t * @param  {float} Range of the sensor\n\t * @return {Visualizer}\n\t */\n\tplotUserTrace(user, color = '#C7C7C7', range = undefined) {\n\t\t//@todo This can possibly be optimised by only plotting traces that have\n\t\t//\t\tnot yet been plotted.\n\n\t\tthis.ctx.lineJoin = 'round';\n\t\tthis.ctx.lineWidth = 0.1;\n\t\tthis.ctx.fillStyle = '#960E0E';\n\t\tthis.ctx.strokeStyle = color;\n\n\t\tthis.ctx.beginPath();\n\n\t\tuser.trace.values().forEach(({x, y, theta}, i) => {\n\n\t\t\tif (i === 0) {\n\t\t\t\tthis.ctx.moveTo(this._tx(x), this._ty(y));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.ctx.lineTo(this._tx(x), this._ty(y));\n\t\t\t}\n\t\t});\n\n\t\tthis.ctx.stroke();\n\t\tthis.ctx.closePath();\n\n\t\tif (range !== undefined) {\n\t\t\tthis.ctx.strokeStyle = '#C7C7C7';\n\t\t\tthis.ctx.beginPath();\n\t\t\tthis.ctx.arc(this._tx(user.x), this._ty(user.y), range, 0, Math.PI * 2, true);\n\t\t\tthis.ctx.stroke();\n\t\t\tthis.ctx.closePath();\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Plot a set of objects as squares\n\t * @param {Array} objects An array of objects with at least an x,y value\n\t * @param {string} fillStyle\n\t * @return {Visualizer}\n\t */\n\tplotObjects(objects, fillStyle = '#000000') {\n\t\tthis.ctx.fillStyle = fillStyle;\n\t\tconst size = 0.35;\n\n\t\tobjects.forEach((o) => {\n\n\t\t\t//Compensate for landmark size\n\t\t\tvar x = this._tx(o.x) - (0.35 * size);\n\t\t\tvar y = this._ty(o.y) - (0.35 * size);\n\n\t\t\tthis.ctx.fillRect(x, y, size, size);\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Plot the predictions of each landmark\n\t * @param  {Array} particles\n\t * @param  {Array} landmarks\n\t * @param  {String} fillStyle\n\t * @return {Visualizer}\n\t */\n\tplotLandmarkPredictions(particles, landmarks = undefined, fillStyle = '#941313') {\n\t\tthis.ctx.fillStyle = fillStyle;\n\t\tconst size = 0.5;\n\n\t\tparticles.forEach((p) => {\n\t\t\tp.landmarks.forEach((l, uid) => {\n\n\t\t\t\tthis._plotLandmark(uid, l, landmarks);\n\t\t\t});\n\n\t\t\tthis.plotLandmarksErrors(p);\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Plot the average position of landmarks\n\t * @param  {Map} landmarkMap Map of landmarks\n\t * @param {Array} landmarks True landmarks\n\t * @return {Visualizer}\n\t */\n\tplotLandmarkEstimate(landmarkMap, landmarks = undefined) {\n\n\t\tlandmarkMap.forEach((l, uid) => {\n\t\t\tthis._plotLandmark(uid, l, landmarks);\n\t\t});\n\t}\n\n\t/**\n\t * Plot a landmark initialisation particle set\n\t * @param  {LandmarkInitializationSet} landmarkSet\n\t * @param  {String} fillStyle\n\t * @return {Visualizer}\n\t */\n\tplotLandmarkInitParticles(landmarkSet, fillStyle = '#2EFF3C') {\n\n\t\tthis.ctx.fillStyle = fillStyle;\n\t\tconst size = 0.5;\n\n\t\tfor (let set of landmarkSet.particleSets()) {\n\n\t\t\tset.particles.forEach((p) => {\n\n\t\t\t\t//Compensate for landmark size\n\t\t\t\tconst x = this._tx(p.x) - (0.5 * size);\n\t\t\t\tconst y = this._ty(p.y) - (0.5 * size);\n\n\t\t\t\tthis.ctx.fillRect(x, y, size, size);\n\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Plot elipses of the landmark errors\n\t * @param  {Particle} particle\n\t * @return {Visualizer}\n\t */\n\tplotLandmarksErrors(particle) {\n\n\t\tparticle.landmarks.forEach((l) => {\n\n\t\t\tconst{ values, vectors } = eigenvv(l.cov);\n\n\t\t\tlet major;\n\t\t\tlet minor;\n\n\t\t\tif (values[0] > values[1]) {\n\t\t\t\tmajor = [\n\t\t\t\t\tvectors[0][0] * Math.sqrt(values[0]),\n\t\t\t\t\tvectors[0][1] * Math.sqrt(values[0])\n\t\t\t\t];\n\t\t\t\tminor = [\n\t\t\t\t\tvectors[1][0] * Math.sqrt(values[1]),\n\t\t\t\t\tvectors[1][1] * Math.sqrt(values[1])\n\t\t\t\t];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmajor = [\n\t\t\t\t\tvectors[1][0] * Math.sqrt(values[1]),\n\t\t\t\t\tvectors[1][1] * Math.sqrt(values[1])\n\t\t\t\t];\n\t\t\t\tminor = [\n\t\t\t\t\tvectors[0][0] * Math.sqrt(values[0]),\n\t\t\t\t\tvectors[0][1] * Math.sqrt(values[0])\n\t\t\t\t];\n\t\t\t}\n\n\t\t\tlet beginX = 0;\n\t\t\tlet beginY = 0;\n\t\t\tthis.ctx.beginPath();\n\t\t\tthis.ctx.strokeStyle = '#B06D6D';\n\t\t\tfor (let i = 0; i < 16; i++) {\n\n\t\t\t\tconst r = Math.PI * (i / 8);\n\t\t\t\tconst x = this._tx(minor[0] * Math.cos(r) + major[0] * Math.sin(r) + l.x);\n\t\t\t\tconst y = this._ty(minor[1] * Math.cos(r) + major[1] * Math.sin(r) + l.y);\n\n\t\t\t\tif (isNaN(x)) {\n\t\t\t\t\tconsole.log({m0: minor[0], m1: minor[1], mm0: major[0], mm1: major[1]});\n\t\t\t\t\tconsole.log({values, vectors});\n\t\t\t\t}\n\n\t\t\t\tif (i === 0) {\n\t\t\t\t\tthis.ctx.moveTo(x, y);\n\t\t\t\t\tbeginX = x;\n\t\t\t\t\tbeginY = y;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.ctx.lineTo(x, y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.ctx.lineTo(beginX, beginY);\n\t\t\tthis.ctx.stroke();\n\t\t\tthis.ctx.closePath();\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Plot a single landmark\n\t * @param  {string} uid UID of landmark\n\t * @param  {Object} landmark The landmark to plot\n\t * @param  {Array} True landmark positions\n\t * @param  {Number} size     [description]\n\t * @return {[type]}          [description]\n\t */\n\t_plotLandmark(uid, landmark, landmarks = undefined, size = 0.5) {\n\n\t\t//Compensate for landmark size\n\t\tconst x = this._tx(landmark.x) - (0.5 * size);\n\t\tconst y = this._ty(landmark.y) - (0.5 * size);\n\n\t\tthis.ctx.fillRect(x, y, size, size);\n\n\t\tif (landmarks !== undefined) {\n\t\t\tconst trueL = landmarks.landmarkByUid(uid);\n\t\t\tthis.ctx.strokeStyle = '#8C7A7A';\n\t\t\tthis.ctx.beginPath();\n\t\t\tthis.ctx.moveTo(x, y);\n\t\t\tthis.ctx.lineTo(this._tx(trueL.x), this._ty(trueL.y));\n\t\t\tthis.ctx.stroke();\n\t\t\tthis.ctx.closePath();\n\t\t}\n\t}\n\n\t/**\n\t * Scale the canvas\n\t * @return {void}\n\t */\n\t_scaleCanvas() {\n\n\t\t//Use 1.99 scale on retina devices\n\t\tconst scaleFactor = window.devicePixelRatio && window.devicePixelRatio === 2 ? 1.99 : 1;\n\n\t\t//Get desired width of the canvas\n\t\tconst width = Math.min(window.innerWidth, window.innerHeight);\n\n\t\t//Make the canvas smaller with css\n\t\tthis.canvas.width = width * scaleFactor;\n\t\tthis.canvas.height = width * scaleFactor;\n\t\tthis.canvas.style.width = width + 'px';\n\t\tthis.canvas.style.height = width + 'px';\n\n\t\tvar scaleFactorX = (width * scaleFactor) / this.xMax;\n\t\tvar scaleFactorY = (width * scaleFactor) / this.yMax;\n\n\t\t//Scale the canvas to translate coordinates to pixels\n\t\tthis.ctx.scale(scaleFactorX, scaleFactorY);\n\t}\n\n\t_tx(x) {\n\t\treturn x + (this.xMax / 2);\n\t}\n\n\t_ty(y) {\n\t\treturn this.yMax - (y + (this.yMax / 2));\n\t}\n}\n\nexport default Visualizer;","import ParticleSet from './models/particle-set';\nimport Visualizer from './view/visualizer';\nimport SimulatedUser from './simulation/user';\nimport { SimulatedLandmarkSet } from './simulation/landmark';\nimport Sensor from './models/sensor';\nimport config from './config';\n\nwindow.SlacENV = config.environment;\n\nwindow.SlacApp = {\n\n\tparticleSet: undefined,\n\tvisualizer: undefined,\n\tuser: undefined,\n\tlandmarks: undefined,\n\tsensor: undefined,\n\n\tinitialize: function() {\n\t\t'use strict';\n\n\t\tthis.particleSet = new ParticleSet(config.particles.N, config.particles.defaultPose);\n\t\tthis.visualizer = new Visualizer('slac-map', 100, 100);\n\t\tthis.user = new SimulatedUser({x: 0, y: 0, theta: 0.0}, 2, {xRange: 50, yRange: 50, padding: 5});\n\n\t\t//Add simulated data to the user object\n\t\t//this._addSimulatedData();\n\n\t\tthis.landmarks = new SimulatedLandmarkSet(40, {xRange: 50, yRange: 50}, 50, config.beacons);\n\t\tthis.sensor = new Sensor(config.beacons);\n\n\t\t//Start broadcasting of the simulated landmarks\n\t\t//Broadcasts are sent to the sensor, the user object is used to find nearby landmarks\n\t\tthis.landmarks.startBroadcast(this.sensor, this.user);\n\t},\n\n\tstep: function() {\n\t\tthis.user.randomWalk();\n\n\t\t//Get accelerometer data\n\t\t// ...\n\n\t\t//Transform to angle and distance\n\t\t//Simulate this by getting the control from the simulated user\n\t\tconst {r, theta} = this.user.getLastControl();\n\n\t\t//Sample a new pose for each particle in the set\n\t\tthis.particleSet.samplePose({r, theta});\n\n\t\t//Get the latest observation\n\t\tconst observations = this.sensor.getObservations();\n\n\t\tobservations.forEach((obs) => this.particleSet.processObservation(obs));\n\n\t\tthis.particleSet.resample();\n\n\t\t//Update the canvas\n\t\tthis.visualizer.clearCanvas()\n\t\t\t\t\t\t.plotUserTrace(this.user, 'blue', config.beacons.range)\n\t\t\t\t\t\t.plotObjects(this.landmarks.landmarks)\n\t\t\t\t\t\t.plotParticleSet(this.particleSet);\n\n\t\tif (window.SlacENV == 'debug') {\n\t\t\tthis.visualizer.plotLandmarkPredictions(this.particleSet.particles(), this.landmarks);\n\t\t\tthis.visualizer.plotLandmarkInitParticles(this.particleSet.landmarkInitSet);\n\t\t}\n\t\telse {\n\t\t\tthis.visualizer.plotLandmarkEstimate(this.particleSet.landmarkEstimate(), this.landmarks);\n\t\t}\n\t},\n\n\t_addSimulatedData: function() {\n\t\tconst thetas =\n\t\t\t[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08099418560036185, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.002454369260617026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.000818123086872342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000545415391248228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001636246173744684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.000272707695624114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000272707695624114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004363323129985824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006544984694978736, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0029997846518652537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0029997846518652537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001908953869368798, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000818123086872342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.006272276999354622, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.001090830782496456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08290313946973066, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00545415391248228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.11344640137963143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.09272061651219876, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.007363107781851078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.20453077171808548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1598067096357308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1990766178056032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.241619018322965, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1562615095926173, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.22552926428114228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.23425591054111392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.31334114227210697, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.22362031041177347, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0681769239060285, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.12871803233458182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.08426667794785123, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0995383089028016, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006544984694978736, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00272707695624114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.000818123086872342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0029997846518652537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003272492347489368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06899504699290084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06599526234103559, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0719948316447661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007090400086226964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0029997846518652537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.13199052468207118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.12408200150897186, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1892591407631351, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.13335406316019174, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.13717197089892932, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.13799009398580167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.10471975511965978, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.10608329359778035, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0703585854710214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.004363323129985824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001090830782496456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004636030825609938, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08699375490409236, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00545415391248228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004908738521234052, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002181661564992912, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000818123086872342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.001908953869368798, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.002181661564992912, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0029997846518652537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.005726861608106394, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06463172386291502, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.08835729338221293, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06844963160165261, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.007090400086226964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.004908738521234052, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00136353847812057, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08235772407848242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09844747812030515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.17862354063379465, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.275162064884731, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2519819107566813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.41369757426178094, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.37879098922189436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5162356678164478, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4955098829490151, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.32288591161895097, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.25443628001729834, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14862569411514212, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11017390903214205, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0859029241215959, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007090400086226964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007635815477475192, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007635815477475192, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007363107781851078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0029997846518652537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.000272707695624114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0719948316447661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.07308566242726255, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1366265555076811, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.11671889372712078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.07526732399225546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.001636246173744684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003817907738737596, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.24461880297483024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3239767424014474, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.26207209549477356, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.28197975727533386, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19144080232812802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13880821707267402, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07063129316664553, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0040906154343617095, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0040906154343617095, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00272707695624114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.001636246173744684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.001908953869368798, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.001636246173744684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.003272492347489368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06299547768917033, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00545415391248228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003545200043113482, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007090400086226964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07635815477475191, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09272061651219876, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20398535632683726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.18953184845875923, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20153098706622025, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1502619402888868, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.15162547876700738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.149013120932523, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09626581655531224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09326603190344698, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007635815477475192, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007363107781851078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003817907738737596, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00272707695624114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00272707695624114, 0.0];\n\t\tconst distances = thetas.map(() => 0.16);\n\n\t\tthis.user.setPath(distances, thetas);\n\t}\n};","import LandmarkInitializationSet from '../app/models/landmark-init-set';\n\nif (window.test === undefined) {\n\twindow.test = {};\n}\n\n/**\n * Pattern that the user walks\n * @yield {Number}\n */\nfunction* walkPattern() {\n\tconst steps = 40;\n\tconst stepSize = 2;\n\tconst quarter = steps / 4;\n\n\tfor (let i = 0; i < steps; i++) {\n\t\tif (i < quarter) {\n\t\t\tyield {dx: stepSize, dy: 0};\n\t\t}\n\t\telse if (i < (2 * quarter)) {\n\t\t\tyield {dx: 0, dy: stepSize};\n\t\t}\n\t\telse if (i < (3 * quarter)) {\n\t\t\tyield {dx: -stepSize, dy: 0};\n\t\t}\n\t\telse if (i < steps) {\n\t\t\tyield {dx: 0, dy: -stepSize}; \n\t\t}\n\t}\n}\n\nwindow.test.landmarkInit = {\n\n\tlandmarkSet: undefined,\n\tuserX: 0,\n\tuserY: 0,\n\tlX: 0,\n\tlY: 0,\n\tuserTrace: [],\n\txMax: 50,\n\tyMax: 50,\n\tctx: undefined,\n\tcanvas: undefined,\n\n\tpattern: undefined,\n\n\tinitialize: function() {\n\n\t\t//Init random landmark\n\t\tthis.lX = Math.random() * 30 - 15;\n\t\tthis.lY = Math.random() * 30 - 15;\n\n\t\tthis.landmarkSet = new LandmarkInitializationSet();\n\t\tthis.canvas = document.getElementById('test-content');\n\t\tthis.ctx = this.canvas.getContext('2d');\n\t\tthis.ctx.scale(10, 10);\n\n\t\tthis.userTrace.push({x: this.userX, y: this.userY});\n\n\t\tthis.pattern = walkPattern();\n\t},\n\n\titerate: function() {\n\n\t\tconst {dx, dy} = this.pattern.next().value;\n\n\t\tthis.userX = this.userX + dx;\n\t\tthis.userY = this.userY + dy;\n\n\t\tthis.userTrace.push({x: this.userX, y: this.userY});\n\n\t\tconst r = Math.sqrt(Math.pow(this.lX - this.userX, 2) + Math.pow(this.lY - this.userY, 2));\n\n\t\tthis.landmarkSet.addMeasurement('uid', this.userX, this.userY, r);\n\n\t\tthis._draw();\n\t\tconsole.debug(`True r: ${r}`);\n\t},\n\n\t_draw: function() {\n\n\t\tthis.ctx.clearRect (0, 0, this.canvas.width, this.canvas.height);\n\t\tthis.ctx.fillStyle = '#000000';\n\n\t\tthis.landmarkSet.particleSetMap.get('uid').particles.forEach((p) => {\n\n\t\t\tconst x = this._tx(p.x);\n\t\t\tconst y = this._ty(p.y);\n\n\t\t\tthis.ctx.fillRect(x, y, 0.3, 0.3);\n\t\t});\n\n\t\tthis.ctx.fillStyle = '#ff0000';\n\t\tthis.userTrace.forEach((t) => this.ctx.fillRect(this._tx(t.x), this._ty(t.y), 0.5, 0.5));\n\n\t\tthis.ctx.fillStyle = '#00ff00';\n\t\tthis.ctx.fillRect(this._tx(this.lX), this._ty(this.lY), 0.5, 0.5);\n\t},\n\n\t_tx: function(x) {\n\t\treturn x + (this.xMax / 2);\n\t},\n\n\t_ty: function(y) {\n\t\treturn this.yMax - (y + (this.yMax / 2));\n\t}\n};","import VoteAccumulator from '../app/models/vote-accumulator';\n\nif (window.test === undefined) {\n\twindow.test = {};\n}\n\nwindow.test.voting = {\n\n\tvotes: undefined,\n\tuserX: 0,\n\tuserY: 0,\n\ttrace: [],\n\n\tlX: -5,\n\tlY: 10,\n\n\tlR: 0,\n\tlC: 0,\n\n\tinitialize: function() {\n\t\tthis.votes = new VoteAccumulator(75, 5);\n\n\t\tconst {row, column} = this.votes._cartesianToCell(this.lX, this.lY);\n\t\tthis.lR = row;\n\t\tthis.lC = column;\n\n\t\t//Create a table to show the votes\n\t\tdocument.getElementById('test-content').innerHTML = this._createOutputTable();\n\t\tthis._displayLandmark();\n\t},\n\n\titerate: function() {\n\n\t\tthis.userX += Math.random() * 4 - 2;\n\t\tthis.userY += Math.random() * 6 - 3;\n\n\t\tthis.trace.push({x: this.userX, y: this.userY});\n\n\t\tconst r = Math.sqrt(Math.pow(this.lX - this.userX, 2) + Math.pow(this.lY - this.userY, 2)) + (Math.random() * 6 - 3);\n\n\t\tthis.votes.addMeasurement(this.userX, this.userY, r);\n\n\t\tdocument.getElementById('test-content').innerHTML = '';\n\t\tdocument.getElementById('test-content').innerHTML = this._createOutputTable();\n\t\tthis._displayLandmark();\n\t\tthis._displayUser();\n\t},\n\n\t_createOutputTable: function() {\n\n\t\tlet table = '<table>';\n\n\t\ttable += this.votes.votes.reduce((output, row, rowN) => {\n\t\t\treturn output\n\t\t\t\t\t+ '<tr>'\n\t\t\t\t\t+ row.reduce((rowOutput, cell, columnN) => {\n\t\t\t\t\t\tconst color = 'background-color: rgba(0, 0, 0, ' + (cell / 50) + ');';\n\t\t\t\t\t\tconst id = rowN + '' + columnN;\n\n\t\t\t\t\t\treturn rowOutput +\n\t\t\t\t\t\t\t\t'<td id=\"' + id + '\" style=\"' + color + '\">'\n\t\t\t\t\t\t\t\t+ cell +\n\t\t\t\t\t\t\t\t'</td>';\n\t\t\t\t\t}, '')\n\n\t\t\t\t\t+ '</tr>';\n\t\t}, '');\n\n\t\ttable += '</table>';\n\t\treturn table;\n\t},\n\n\t_displayLandmark: function() {\n\t\tdocument.getElementById(this.lR + '' + this.lC).style.backgroundColor = 'red';\n\t},\n\n\t_displayUser: function() {\n\t\tthis.trace.forEach((pos) => {\n\t\t\tconst {row, column} = this.votes._cartesianToCell(pos.x, pos.y);\n\n\t\t\tdocument.getElementById(row + '' + column).style.backgroundColor = 'green';\n\t\t});\n\t}\n};"],"sourceRoot":"/source/"}